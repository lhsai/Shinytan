% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_report.R
\name{generate_report}
\alias{generate_report}
\title{Generate a report for a shinystan object.}
\usage{
generate_report(
  sso,
  n_param = 3,
  pars = NULL,
  output_format = "html_document",
  view = TRUE,
  report_type = "diagnose"
)
}
\arguments{
\item{sso}{A \code{\link[=as.shinystan]{shinystan object}}.}

\item{n_param}{On how many parameters do you want the report to be? To
print the report for all parameters put 'n_param = Inf` or
n_param = "all"`.}

\item{pars}{An optional character vector of parameter names. If no names are 
specified the n_param count will be used. Arguments passed to pars take
precedence over the n_param argument.}

\item{output_format}{What type of report would you like? The options are
'html_document', 'pdf_document' and 'word_document'.}

\item{view}{Do you want to open the report after it is generated?}

\item{report_type}{What type of report would you like? The options are
'diagnose', 'estimate' and 'both'. The default is 'diagnose'.}
}
\value{
A report is generated and the path where it is stored is printed.
}
\description{
The report displays either diagnostics information or estimation results.
By default the report informs you about the worst parameters in 
your model, based on effective sample size. You can choose specific 
parameters using the \code{pars} argument. The report will be saved in your 
current working directory.
}
\examples{
\dontrun{
# Using example shinystan object 'eight_schools'
generate_report(eight_schools, report_type = "both")

######################
### stanfit object ###
######################
library("rstan")
fit <- stan_demo("eight_schools")
sso <- as.shinystan(fit, model_name = "example")
generate_report(sso, pars = c("tau", "mu", "theta[1]"), 
                output_format = "word_document")
# to change figure visualization use bayesplot::bayesplot_theme_set()
bayesplot::bayesplot_theme_set(theme_dark())
generate_report(sso, pars = c("tau", "mu", "theta[1]"))

 
######################
### stanreg object  ##
######################

library("rstanarm")
example("example_model")
sso <- as.shinystan(example_model)
generate_report(sso)


######################
### brms object    ###
######################

library(brms)
bprior1 <- prior(student_t(5,0,10), class = b) +
  prior(cauchy(0,2), class = sd)
  fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient),
              data = epilepsy, family = poisson(), prior = bprior1)
sso <- as.shinystan(fit1$fit)
generate_report(sso, n_param = 5)

######################
### mcmc.list object #
######################

library(rjags)
data(LINE)
LINE$recompile()
LINE.out <- coda.samples(LINE, c("alpha","beta","sigma"), n.iter=1000)
sso <- shinystan::as.shinystan(LINE.out)
generate_report(sso)

}

}
